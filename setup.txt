PROJECT BACKEND SETUP
    - npm i express express-graphql graphql
    - npm i -D nodemon
    - npm i redis
    - npm i --save-dev prisma typescript ts-node @types/node @types/express @types/cors
    - npx tsc --init
    - npm i @prisma/client
    - npx prisma init --datasource-provider postgresql

PRISMA MODELS
    - each model must have a unique primary key - typically the id -> id String @id @default(uuid())
    - Specifiy the data fields with their respective types such as Integer, String, DataTime, etc.
    - Relationships: 1 to many is like the following: writtenArticles Article[] @relation("authored articles") and on the author thing, its author User @relation("authored articles", fields: [authorid], references: [id])
    - above, u have the name of th relation "authored articles", on on the side where its the "many", u put the Model name with the [] - Article[], and on the Article side, its the name of the relation "authored articles", the fields which the Articles relates to "authorid" which is also defined in Article model, and then references the "id" in Article 
    - many to many relationship is just 2 arrays, one on each model
    - npx prisma migrate dev --name init

GRAPHQL API SETUP
    - import all the different graphql types that there are
    - create the type defenitions, name, description, fields which is a function and inside it, u have all the properties stored in the prisma model, with the type of it like {type: GraphQLNonNull(GraphQLID)}. Fields must be same name as in model, then resolvers for the ones which arent implicitly defined, like relationships and arrays of objects
    - create query and mutation graphql object types, same method as above, resolvers needed

Apollo GraphQL SETUP
    - make a standard query or mutation, but make it an export
    - in next.js, make sure the variables passed into the apollo query or mutation are the same variable names as well, or u can do "variable name": variable

Next.js SETUP
    -  dont do next-13 yet, do normal next without src folder, with typescript
    - index.tsx in the folders - routes, [id] if dynamic route
    - havent used serverside props or async functions, so not sure about that much with apollo
    
Redis SETUP
    - import * as Redis from "redis"
    - await since redis still returns promise, it is in string form tho not json, create new redisclient with const redisClient = Redis.createClient()
    - redisClient.connect()
    - example: let article: string | null = await redisClient.get(user.username + 'Written'), all key value pairs
    - set example: await redisClient.set(user.username + 'Written', JSON.stringify(writtenArticles)), stringify since redis stores strings

Docker SETUP
    